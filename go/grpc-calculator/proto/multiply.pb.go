// Code generated by protoc-gen-go. DO NOT EDIT.
// source: multiply.proto

/*
Package multiply is a generated protocol buffer package.

It is generated from these files:
	multiply.proto

It has these top-level messages:
	MultiplyRequest
	MultiplyResponse
*/
package multiply

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MultiplyRequest struct {
	A uint64 `protobuf:"varint,1,opt,name=a" json:"a,omitempty"`
	B uint64 `protobuf:"varint,2,opt,name=b" json:"b,omitempty"`
}

func (m *MultiplyRequest) Reset()                    { *m = MultiplyRequest{} }
func (m *MultiplyRequest) String() string            { return proto.CompactTextString(m) }
func (*MultiplyRequest) ProtoMessage()               {}
func (*MultiplyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MultiplyRequest) GetA() uint64 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *MultiplyRequest) GetB() uint64 {
	if m != nil {
		return m.B
	}
	return 0
}

type MultiplyResponse struct {
	N uint64 `protobuf:"varint,1,opt,name=n" json:"n,omitempty"`
}

func (m *MultiplyResponse) Reset()                    { *m = MultiplyResponse{} }
func (m *MultiplyResponse) String() string            { return proto.CompactTextString(m) }
func (*MultiplyResponse) ProtoMessage()               {}
func (*MultiplyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MultiplyResponse) GetN() uint64 {
	if m != nil {
		return m.N
	}
	return 0
}

func init() {
	proto.RegisterType((*MultiplyRequest)(nil), "MultiplyRequest")
	proto.RegisterType((*MultiplyResponse)(nil), "MultiplyResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MService service

type MServiceClient interface {
	Multiply(ctx context.Context, in *MultiplyRequest, opts ...grpc.CallOption) (*MultiplyResponse, error)
}

type mServiceClient struct {
	cc *grpc.ClientConn
}

func NewMServiceClient(cc *grpc.ClientConn) MServiceClient {
	return &mServiceClient{cc}
}

func (c *mServiceClient) Multiply(ctx context.Context, in *MultiplyRequest, opts ...grpc.CallOption) (*MultiplyResponse, error) {
	out := new(MultiplyResponse)
	err := grpc.Invoke(ctx, "/MService/Multiply", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MService service

type MServiceServer interface {
	Multiply(context.Context, *MultiplyRequest) (*MultiplyResponse, error)
}

func RegisterMServiceServer(s *grpc.Server, srv MServiceServer) {
	s.RegisterService(&_MService_serviceDesc, srv)
}

func _MService_Multiply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceServer).Multiply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MService/Multiply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceServer).Multiply(ctx, req.(*MultiplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MService",
	HandlerType: (*MServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Multiply",
			Handler:    _MService_Multiply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "multiply.proto",
}

func init() { proto.RegisterFile("multiply.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 127 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0x2d, 0xcd, 0x29,
	0xc9, 0x2c, 0xc8, 0xa9, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xd2, 0xe5, 0xe2, 0xf7, 0x85,
	0x8a, 0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0xf1, 0x70, 0x31, 0x26, 0x4a, 0x30, 0x2a,
	0x30, 0x6a, 0xb0, 0x04, 0x31, 0x26, 0x82, 0x78, 0x49, 0x12, 0x4c, 0x10, 0x5e, 0x92, 0x92, 0x02,
	0x97, 0x00, 0x42, 0x79, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0x2a, 0x48, 0x45, 0x1e, 0x4c, 0x7d, 0x9e,
	0x91, 0x35, 0x17, 0x87, 0x6f, 0x70, 0x6a, 0x51, 0x59, 0x66, 0x72, 0xaa, 0x90, 0x3e, 0x17, 0x07,
	0x4c, 0xb5, 0x90, 0x80, 0x1e, 0x9a, 0x3d, 0x52, 0x82, 0x7a, 0xe8, 0x46, 0x25, 0xb1, 0x81, 0x1d,
	0x65, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x94, 0xb8, 0x52, 0xa6, 0x00, 0x00, 0x00,
}
